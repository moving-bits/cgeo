/*
 * Just run this script using "gradlew", and it will show you typical examples of how to use it.
 */

defaultTasks 'cgeoHelp'

tasks.register('cgeoHelp') {
    group = 'cgeo'
    description = 'Displays help for building cgeo.'
    doLast {
        println ''
        println 'These are some of the available commands for building cgeo.'
        println ''
        println 'cleaning all generated artifacts:'
        println '    gradlew clean'
        println ''
        println 'build:'
        println '    gradlew assembleDebug'
        println ''
        println 'install on connected device/emulator:'
        println '    gradlew installBasicDebug'
        println ''
        println 'run app on connected device/emulator:'
        println '    gradlew runBasicDebug'
        println ''
        println 'instrumentation tests on connected device/emulator:'
        println '    gradlew connectedBasicDebugAndroidTest'
        println ''
        println 'pure unit tests WITHOUT device'
        println '    gradlew testBasicDebugUnitTest'
        println ''
        println 'all unit tests (pure and instrumentation)'
        println '    gradlew testDebug'
        println ''
        println 'check project dependencies for updates:'
        println '    gradlew dependencies main:dependencies'
        println ''
        println 'check gradle dependencies for updates:'
        println '    gradlew dependencyUpdates'
        println ''
        println 'Use "gradlew tasks" for more available tasks.'
        println ''
        println ''
        println 'Available build types are: debug, nightly (requires an env var named NB), ' +
                'rc (requires an env var named RC), release.'
    }
}

/*
 * Build scan plugin shall be applied first
 */
apply plugin: 'com.gradle.build-scan'
/*
 * update check for all components in this gradle script
 */
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'

buildscript {
    repositories {
        jcenter()
        // gradle build-scan for profiling our build script
        maven {
            url 'https://plugins.gradle.org/m2'
        }
        google()
    }
    dependencies {
        // these dependencies are used by gradle plugins, not by our projects

        // check for updates of gradle plugin dependencies
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0'

        // Android gradle plugin
        classpath 'com.android.tools.build:gradle:3.3.2'

        // un-mocking of portable Android classes
        classpath 'de.mobilej.unmock:UnMockPlugin:0.7.3'

        // Google Services (App Invite) has its own Gradle plugin
        classpath 'com.google.gms:google-services:2.1.2'

        // monitor our application method limit
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.6'

        // ribbonizer for easier distinction of non-release builds
        classpath 'com.github.gfx.ribbonizer:ribbonizer-plugin:2.1.0'

        // gradle build script profiling
        classpath 'com.gradle:build-scan-plugin:2.2.1'
    }
}

// filter out non release version updates and other updates we cannot use
allprojects {
    configurations {
        all {
            resolutionStrategy {
                componentSelection {
                    all { ComponentSelection selection ->
                        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pr'].any { qualifier ->
                            selection.candidate.version.contains(qualifier)
                        }
                        // allow beta version of androidsvg
                        if (selection.candidate.group == 'com.caverock') {
                            rejected = false
                        }
                        // google auto service only available as rc2 right now
                        if (selection.candidate.group == 'com.google.auto.service') {
                            rejected = false
                        }
                        if (rejected) {
                            selection.reject('Release candidate')
                        }

                        // https://github.com/joel-costigliola/assertj-core/issues/345
                        if (selection.candidate.group == 'org.assertj' && selection.candidate.module == 'assertj-core' && selection.candidate.version.substring(0,1).toInteger() > 2) {
                            selection.reject("assertj 3.x or higher require Java 7 SE classes not available in Android")
                        }
                        // findbugs team has some release trouble
                        if (selection.candidate.group == 'com.google.code.findbugs' && selection.candidate.module == 'annotations' && selection.candidate.version == '3.0.1') {
                            selection.reject("3.0.1 is not an upgrade of 3.0.1u2")
                        }
                        // Apache Commons IO 2.6 fails in FileUtils.deleteDirectory()
                        if (selection.candidate.group == 'commons-io' && selection.candidate.module == 'commons-io' && selection.candidate.version.substring(0,1).toInteger()*10+selection.candidate.version.substring(2,3).toInteger() > 25) {
                            selection.reject("Apache Commons IO 2.6 calls methods not available in the Android runtime.")
                        }
                    }
                }
            }
        }
    }

    repositories {
        mavenCentral()
        jcenter()
        // hosts e.g. viewpagerindicator
        maven {
            url "https://jitpack.io"
        }
        // viewpager fork
        maven {
            url 'https://dl.bintray.com/alexeydanilov/maven'
        }
        // Android Support libraries are now in an online Maven repository
        google()
    }
}


buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}


/*
 * common configuration for the Java projects
 */

ext.minSdkVersion = 14

subprojects {
    repositories {
        mavenCentral()
        jcenter()
        // hosts e.g. viewpagerindicator
        maven {
            url "https://jitpack.io"
        }
    }

    // disable warning of annotation processor about annotation types with no registered processor (like @NonNull)
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:-processing"
    }

    idea.module {
        downloadJavadoc = true
        downloadSources = true
    }
}

/*
 * Make sure that we use the source distribution when updating the wrapper from the command line.
 */
tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

/*
 * Configuration for dependencyUpdates, see https://github.com/ben-manes/gradle-versions-plugin
 */
tasks.named('dependencyUpdates') {
    checkForGradleUpdate = true
    revision = "release"
    gradleReleaseChannel = "current"
}
